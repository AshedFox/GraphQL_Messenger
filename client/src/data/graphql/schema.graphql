type Query {
    searchChats(name: String, count: Int = 20, lastId: ID, lastCreatedAt: Timestamp): ChatsResult!
    chats(count: Int = 20, lastId: ID, lastCreatedAt: Timestamp): ChatsResult!
    chat(id: ID!): Chat!
    users: [User!]!
    user(id: ID!): User!
    me: User!
    messages(chatId: ID!, count: Int = 20, lastId: ID, lastCreatedAt: Timestamp): MessagesResult!
    message(id: ID!): Message!
    chatUser(chatId: ID!, userId: ID!): ChatUser!
    chatUsers(chatId: ID!, count: Int = 20, lastUserId: ID, lastCreatedAt: Timestamp): ChatUsersResult!
    checkInvite(token: String!): Boolean!
}

type ChatsResult {
    chats: [Chat!]!
    hasMore: Boolean!
}

type Chat {
    id: ID!
    name: String!
    createdAt: Timestamp!
    updatedAt: Timestamp!
    deletedAt: Timestamp
    status: ChatStatus!
    access: ChatAccess!
    lastSeen: Timestamp
    avatar: File
    creator: User!
    users: [ChatUser!]!
    lastMessage: Message
    messages: [Message!]!
    invites: [ChatInvite!]!
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

enum ChatStatus {
    DEFAULT
    BLOCKED
    DELETED
    BLOCKED_AND_DELETED
}

enum ChatAccess {
    PUBLIC
    PRIVATE
    INVITE_ONLY
}

type File {
    id: ID!
    originalName: String!
    url: String!
    size: Float!
    type: FileType!
    createdAt: Timestamp!
    updatedAt: Timestamp!
}

enum FileType {
    RAW
    IMAGE
    VIDEO
}

type User {
    id: ID!
    email: String!
    name: String!
    createdAt: Timestamp!
    updatedAt: Timestamp!
    deletedAt: Timestamp
    status: UserStatus!
    avatar: File
}

enum UserStatus {
    DEFAULT
    BLOCKED
    DELETED
    BLOCKED_AND_DELETED
}

type ChatUser {
    chat: Chat!
    user: User!
    status: ChatUserStatus!
    role: ChatUserRole!
    createdAt: Timestamp!
    updatedAt: Timestamp!
    deletedAt: Timestamp
    lastSeen: Timestamp
}

enum ChatUserStatus {
    DEFAULT
    BLOCKED
    MUTED
    LEAVED
    BLOCKED_AND_MUTED
    BLOCKED_AND_LEAVED
    MUTED_AND_LEAVED
    BLOCKED_AND_MUTED_AND_LEAVED
}

enum ChatUserRole {
    DEFAULT
    OWNER
    ADMIN
    MODERATOR
}

type Message {
    id: ID!
    text: String!
    createdAt: Timestamp!
    updatedAt: Timestamp!
    deletedAt: Timestamp
    replyTo: Message
    sender: User!
    chat: Chat!
    attachments: [MessageFile!]!
}

type MessageFile {
    message: Message!
    file: File!
    createdAt: Timestamp!
}

type ChatInvite {
    id: String!
    chat: Chat!
    token: String!
    expiredAt: Timestamp
    leftUses: Int
}

type MessagesResult {
    messages: [Message!]!
    hasMore: Boolean!
}

type ChatUsersResult {
    chatUsers: [ChatUser!]!
    hasMore: Boolean!
}

type Mutation {
    addChat(input: AddChatInput!): Chat!
    recoverChat(id: ID!): Chat!
    removeChat(id: ID!): Boolean!
    signUp(input: SignUpInput!): User!
    login(input: LoginInput!): User!
    updateProfile(input: UpdateProfileInput!): User!
    logout: Boolean!
    recoverUser(id: ID!): User!
    removeUser(id: ID!): Boolean!
    removeMe: Boolean!
    addMessage(input: AddMessageInput!): Message!
    recoverMessage(id: ID!): Message!
    removeMessage(id: ID!): Boolean!
    joinChat(chatId: ID!): ChatUser!
    leaveChat(chatId: ID!): Boolean!
    changeLastSeen(lastSeen: Timestamp!, chatId: ID!): Boolean!
    singleUpload(file: Upload!): File!
    multipleUpload(files: [Upload!]!): [File!]!
    activateInvite(token: String!): Boolean!
    generateInvite(input: GenerateChatInviteInput!): Boolean!
    removeInvite(id: ID!): Boolean!
}

input AddChatInput {
    name: String!
    avatarId: ID
}

input SignUpInput {
    email: String!
    password: String!
    name: String!
}

input LoginInput {
    email: String!
    password: String!
}

input UpdateProfileInput {
    name: String
    avatarId: ID
}

input AddMessageInput {
    text: String!
    replyToId: ID
    chatId: ID!
    attachmentsIds: [String!]!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input GenerateChatInviteInput {
    chatId: ID!
    maxUses: Int
    usageTerm: ChatInviteUsageTerm!
}

enum ChatInviteUsageTerm {
    THIRTY_MINUTES
    ONE_HOUR
    TWELVE_HOURS
    ONE_DAY
    SEVEN_DAYS
    THIRTY_DAYS
    INFINITE
}

type Subscription {
    chatAdded(userId: ID!): Chat!
    chatUpdated(chatId: ID!): Chat!
    chatRemoved(chatId: ID!): Chat!
    chatJoined(userId: ID!): Chat!
    chatLeaved(userId: ID!): Chat!
    profileUpdated(userId: ID!): User!
    messageAdded(chatId: ID!): Message!
    messageRemoved(chatId: ID!): Message!
    messageUpdated(chatId: ID!): Message!
    lastSeenChanged(userId: ID!): ChatUser!
    chatUserJoined(chatId: ID!): ChatUser!
    chatUserLeaved(chatId: ID!): ChatUser!
    chatUserUpdated(chatId: ID!): ChatUser!
    chatInviteAdded(chatId: ID!): ChatInvite!
    chatInviteUpdated(chatId: ID!): ChatInvite!
    chatInviteRemoved(chatId: ID!): ChatInvite!
}
